y <- 10
f <- function(x){
y <- 2
y ^2 + g(x)
}
g <- function(x){
x*y
}
f(3)
x <- as.Date("1970-01-01")
x
unclass(x)
unclass (as.Date("1970-01-02"))
unclass (as.Date("2016-01-02"))
unclass (as.Date("2016-09-26"))
date
date()
date()
date()
date()
date()
date()
date()
date()
date
date
date
date
date()
date()
date()
date()
date()
date()
date()
date
date()
date
date()
date
date()
date
date
date
date
date
imprimeMSJ2 <- function (x){
if (is.na(x))
print("x es un valor faltante")
else if (x>0)
print("x es mayor que cero")
else
print ("x es menor a o igual a cero")
invisible(x)
}
imprimeMSJ2(3)
mean(x)
x?
x
traceback()
mean(x)
traceback()
lm(y ~ x)
traceback()
lm(y ~ x)
debug(lm)
debug(lm)
lm
debug(lm)
lm(y~x)
lm(y~x)
function (formula, data, subset, weights, na.action, method = "qr",
model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,
contrasts = NULL, offset, ...)
{
ret.x <- x
ret.y <- y
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "weights", "na.action",
"offset"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
if (method == "model.frame")
return(mf)
else if (method != "qr")
warning(gettextf("method = '%s' is not supported. Using 'qr'",
method), domain = NA)
mt <- attr(mf, "terms")
y <- model.response(mf, "numeric")
w <- as.vector(model.weights(mf))
if (!is.null(w) && !is.numeric(w))
stop("'weights' must be a numeric vector")
offset <- as.vector(model.offset(mf))
if (!is.null(offset)) {
if (length(offset) != NROW(y))
stop(gettextf("number of offsets is %d, should equal %d (number of observations)",
length(offset), NROW(y)), domain = NA)
}
if (is.empty.model(mt)) {
x <- NULL
z <- list(coefficients = if (is.matrix(y)) matrix(,
0, 3) else numeric(), residuals = y, fitted.values = 0 *
y, weights = w, rank = 0L, df.residual = if (!is.null(w)) sum(w !=
0) else if (is.matrix(y)) nrow(y) else length(y))
if (!is.null(offset)) {
z$fitted.values <- offset
z$residuals <- y - offset
}
}
else {
x <- model.matrix(mt, mf, contrasts)
z <- if (is.null(w))
read.csv("perritosgay")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
swirl()
5 + 7
x <- 5+7
x23e
uppps
soy una niña mala =(
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/mysqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
?list.files
args()
args(list.files)
old.dir <- "C:/Users/Galo/Documents"
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd
setwd()
setwd("testdir")
file.create("mytest.R")
list()
list.files()
file.exists("mytest.R")
file.info()
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3")
file.path("mytest3.R")
file.path()
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = T)
dir.create(file.path('testdir2', 'testdir3'), recursive = True)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(getwd())
setwd(old.dir)
unlink('testdir',recursive=FALSE)
unlink('testdir',recursive=TRUE)
swirl
swirl()
?packageName
?swirl
library(swirl)
ls()
rm(list = ls())
swirl()
1:20
pi:10
15:1
:
':'
||
"||"
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,lenght=30)
my_seq <- seq(5, 10, length=30)}
my_seq <- seq(5, 10, length=30)
length()
length(1)
length(my_seq)
1:lenght(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
mao <- num_vect >=6
num_vect >= 6
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"your_name_here")
my_name
my_name <- c(my_char,"Galo")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),collapse = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x *3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
is.na(my_data)
is.na(my_data)
is.na(my_na)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
value -- NaN
0/0
inf- inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x (i.e.x[0])
x (i.e.x[0])
x (x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar","norf")
vect2
identical(vect2)
identical(args+)
identical(args)
?identical()
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
str()
str(str)
str(lm)
str(ls)
x <- rnorm(100)
str(x)
summary(x)
f <- gl(40,10)
f
str(f)
summary(f)
str(airqueality)
str(airquality)
m <- matrix(nrow(100),10,10)
m
m <- matrix(rnorm(100),10,10)
m
str(m)
s <- split(airquality,airquality$Month)
s
str(s)
x <. rnorm(10)
x <- rnorm(10)
x
xy <- rnorm(10,50,5)
y <- rnorm(10,50,5)
y
summary(x)
symmary(y)
summary(y)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(1)
rnorm(5)
normal1 <- rnorm(1000)
normal2 <- rnorm(1000,10,5)
hist(normal1)
summary(normaL1)
summary(normal1)
hist(normal2)
summary(normal2)
normal2 <- rnorm(10000,10,5)
hist(normal1)
summary(normal1)
hist(normal2)
summary(normal2)
rpois(10,1)
poisson1 <- rpois(10000,1)
poisson2 <- rpois(10000,10)
hist(poisson1)
hist(poisson2)
ppois(2,2)
ppois(4,2)
ppois(6,2)
hist(rpois(10000,2))
as.numeric(as.integer(probs*10000))/10
probs <- rpois
as.numeric(as.integer(probs*10000))/10
for ( i in 0:11){print(dpois(i,2))}
hist(runif(10000,10,20))
set.seed(20)
x <- rnorm(100,0,1^2)
E <- rnorm(100,0,2^2)
y <- 0.5 + 2*x +E
y
set.seed(20)
x <- rnorm(100,0,1)
E <- rnorm(100,0,2)
y <- 0.5 + 2*x +E
y
plot(x,y)
z <- 0.5 + 2 *x
plot(x,z)
plot(z,y)
plot(x,z)
set.seed(10)
x <- rbinom(100,1,0.5)
e <-rnorm(100,0,2)
y <- 0.5 + 2* x +e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <-rnorm(100,0,2)
y <- 0.5 + 2* x +e
summary(y)
plot(x,y,main="Modelo Lineal")
set.seed(10)
x <- rbinom(100,1,0.5)
e <-rnorm(100,0,2)
y <- 0.5 + 2* x +e
summary(y)
plot(x,y,main="Modelo Lineal",col="Dark red")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.03*x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y,main="Modelo Poisson", col="forestgreen")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y,main="Modelo Poisson", col="forestgreen")
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10,replace = TRUE)
system.time(readlines("http://fcfm.buap.mx"))
system.time(readlines("http://www.fcfm.buap.mx"))
system.time(readlines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
hilert <- function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
hilert(1000)
hilbert <- function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
system.time(svd(x))
system.time(x <- hilbert(1000))
system.time(svd(x))
system.time(svd(x))
system.time(svd(x))
system.time(svd(x))
lm(x ~ y)
traceback(lm(x ~y))
x <- 4L
class(x)
x <- c(4,TRUE)
class(x)
x <- c(1,3,5)
y <-c(3,2,10)
rbind(x,y)
?vector
x <- list(2,"a","b",TRUE)
x[[2]]
class(x)
?dataframe
class([[x]])
x <. 1:4
x <- 1:4
y <- 2
x+y
x <- c(17,14,5,13,12,10)
x[x >=11] <- 4
x
x <-airquality
x
?data.frame
summary(data.frame)
airquality
apply(airquality,1,mean,na.rm=T)
x <- airmiles
y <- apply(x,1,sum)
y
x <- airquality
y <- apply(x,1,sum)
y
y2 <- apply(x,2,mean)
y2
str(airquality)
summary(airquality)
?mean
airquality
x <-3
x
?data
source(rankhospital)
source("rankhospital.R")
getwd()
rankhospital <- function(estado, resultado, num) {
setwd("~/GitHub/Programacion_Actuarial_III_OT16/Hosp")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
nl <- nrow(outcome)
if (resultado == "infarto") {
r <- 11
} else if (resultado == "falla") {
r <- 17
} else if (resultado == "neumonía") {
r <- 23
} else {
r <- 2
}
x <- vector("numeric")
y <- vector("numeric")
if (r>10){
xl <- 0
for (i in 1:nl) {
if (outcome[i,7] == estado) {
xl <- length(x) + 1
length(x) <- xl
length(y) <- xl
x[xl] <- outcome[i,2]
y[xl] <- outcome[i,r]
}
}
if (xl>0) {
adver <- getOption("warn")
options(warn = -1)
c <- as(y,"numeric")
options(warn = adver)
a <- data.frame(x,c,stringsAsFactors = FALSE)
b <- a[order(c,x),]
if (num == "mejor") {
b[1,1]
} else if (num == "peor") {
lpeor <- nrow(b[complete.cases(b),])
b[lpeor,1]
} else {
b[num,1]
}
} else {
"ESTADO INVALIDO"
}
} else {
"RESULTADO INVALIDO"
}
}
source("rankhospital.R")
getwd()
setwd("~/GitHub/Programacion_Actuarial_III_OT16/Hosp")
getwd()
source("rankhospital.R")
rankhospital("TX","infarto",4)
rankhospital("TX","falla",4)
